// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: game.sql

package db

import (
	"context"
)

const createGame = `-- name: CreateGame :one
INSERT INTO games (name)
VALUES ($1)
RETURNING id, name, created_at, updated_at
`

func (q *Queries) CreateGame(ctx context.Context, name string) (Game, error) {
	row := q.db.QueryRowContext(ctx, createGame, name)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getGameByID = `-- name: GetGameByID :one
SELECT id, name, created_at, updated_at FROM games WHERE id = $1
`

func (q *Queries) GetGameByID(ctx context.Context, id int32) (Game, error) {
	row := q.db.QueryRowContext(ctx, getGameByID, id)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getGames = `-- name: GetGames :many
SELECT id, name, created_at, updated_at FROM games
`

func (q *Queries) GetGames(ctx context.Context) ([]Game, error) {
	rows, err := q.db.QueryContext(ctx, getGames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Game
	for rows.Next() {
		var i Game
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
