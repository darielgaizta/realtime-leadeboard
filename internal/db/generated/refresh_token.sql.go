// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: refresh_token.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createRefreshToken = `-- name: CreateRefreshToken :one
INSERT INTO refresh_tokens (token_id, user_id, token_hash, expires_at, device_info, ip_address)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, token_id, user_id, token_hash, expires_at, is_revoked, device_info, ip_address, created_at, updated_at
`

type CreateRefreshTokenParams struct {
	TokenID    string
	UserID     int32
	TokenHash  string
	ExpiresAt  time.Time
	DeviceInfo sql.NullString
	IpAddress  sql.NullString
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, createRefreshToken,
		arg.TokenID,
		arg.UserID,
		arg.TokenHash,
		arg.ExpiresAt,
		arg.DeviceInfo,
		arg.IpAddress,
	)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.TokenID,
		&i.UserID,
		&i.TokenHash,
		&i.ExpiresAt,
		&i.IsRevoked,
		&i.DeviceInfo,
		&i.IpAddress,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteExpiredRefreshTokens = `-- name: DeleteExpiredRefreshTokens :exec
DELETE FROM refresh_tokens WHERE expires_at < NOW()
`

func (q *Queries) DeleteExpiredRefreshTokens(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteExpiredRefreshTokens)
	return err
}

const getRefreshTokenByTokenID = `-- name: GetRefreshTokenByTokenID :one
SELECT id, token_id, user_id, token_hash, expires_at, is_revoked, device_info, ip_address, created_at, updated_at FROM refresh_tokens WHERE token_id = $1 AND expires_at > NOW() AND is_revoked = FALSE
`

func (q *Queries) GetRefreshTokenByTokenID(ctx context.Context, tokenID string) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, getRefreshTokenByTokenID, tokenID)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.TokenID,
		&i.UserID,
		&i.TokenHash,
		&i.ExpiresAt,
		&i.IsRevoked,
		&i.DeviceInfo,
		&i.IpAddress,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRefreshTokensByUser = `-- name: GetRefreshTokensByUser :many
SELECT id, token_id, user_id, token_hash, expires_at, is_revoked, device_info, ip_address, created_at, updated_at FROM refresh_tokens WHERE user_id = $1 AND expires_at > NOW() AND is_revoked = FALSE
`

func (q *Queries) GetRefreshTokensByUser(ctx context.Context, userID int32) ([]RefreshToken, error) {
	rows, err := q.db.QueryContext(ctx, getRefreshTokensByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RefreshToken
	for rows.Next() {
		var i RefreshToken
		if err := rows.Scan(
			&i.ID,
			&i.TokenID,
			&i.UserID,
			&i.TokenHash,
			&i.ExpiresAt,
			&i.IsRevoked,
			&i.DeviceInfo,
			&i.IpAddress,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByTokenID = `-- name: GetUserByTokenID :one
SELECT u.id, u.username, u.password, u.email, u.created_at, u.updated_at FROM users u
JOIN refresh_tokens r ON u.id = r.user_id
WHERE r.token_id = $1 AND r.expires_at > NOW() AND r.is_revoked = FALSE
`

func (q *Queries) GetUserByTokenID(ctx context.Context, tokenID string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByTokenID, tokenID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const revokeRefreshTokenByTokenID = `-- name: RevokeRefreshTokenByTokenID :exec
UPDATE refresh_tokens
SET is_revoked = TRUE,
    updated_at = NOW()
WHERE token_id = $1
`

func (q *Queries) RevokeRefreshTokenByTokenID(ctx context.Context, tokenID string) error {
	_, err := q.db.ExecContext(ctx, revokeRefreshTokenByTokenID, tokenID)
	return err
}

const revokeRefreshTokensByUser = `-- name: RevokeRefreshTokensByUser :exec
UPDATE refresh_tokens
SET is_revoked = TRUE,
    updated_at = NOW()
WHERE user_id = $1
`

func (q *Queries) RevokeRefreshTokensByUser(ctx context.Context, userID int32) error {
	_, err := q.db.ExecContext(ctx, revokeRefreshTokensByUser, userID)
	return err
}
