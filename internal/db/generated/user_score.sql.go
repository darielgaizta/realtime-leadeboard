// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: user_score.sql

package db

import (
	"context"
)

const createUserScore = `-- name: CreateUserScore :one
INSERT INTO user_scores (user_id, game_id, value)
VALUES ($1, $2, $3)
RETURNING id, user_id, game_id, value, created_at, updated_at
`

type CreateUserScoreParams struct {
	UserID int32
	GameID int32
	Value  int32
}

func (q *Queries) CreateUserScore(ctx context.Context, arg CreateUserScoreParams) (UserScore, error) {
	row := q.db.QueryRowContext(ctx, createUserScore, arg.UserID, arg.GameID, arg.Value)
	var i UserScore
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.GameID,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserScoreByGame = `-- name: GetUserScoreByGame :one
SELECT id, user_id, game_id, value, created_at, updated_at FROM user_scores WHERE user_id = $1 AND game_id = $2
`

type GetUserScoreByGameParams struct {
	UserID int32
	GameID int32
}

func (q *Queries) GetUserScoreByGame(ctx context.Context, arg GetUserScoreByGameParams) (UserScore, error) {
	row := q.db.QueryRowContext(ctx, getUserScoreByGame, arg.UserID, arg.GameID)
	var i UserScore
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.GameID,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
